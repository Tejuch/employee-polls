let users = {
  sarahedo: {
    id: 'sarahedo',
    password:'password123',
    name: 'Sarah Edo',
    avatarURL: "https://i.pravatar.cc/150?img=3",
    answers: {
      "8xf0y6ziyjabvozdd253nd": 'optionOne',
      "6ni6ok3ym7mf1p33lnez": 'optionOne',
      "am8ehyc8byjqgar0jgpub9": 'optionTwo',
      "loxhs1bqm25b708cmbf3g": 'optionTwo'
    },
    questions: ['8xf0y6ziyjabvozdd253nd', 'am8ehyc8byjqgar0jgpub9']
  },
  tylermcginnis: {
    id: 'tylermcginnis',
    password:'abc321',
    name: 'Tyler McGinnis',
    avatarURL: "https://i.pravatar.cc/150?img=10",
    answers: {
      "vthrdm985a262al8qx3do": 'optionOne',
      "xj352vofupe1dqz9emx13r": 'optionTwo',
    },
    questions: ['loxhs1bqm25b708cmbf3g', 'vthrdm985a262al8qx3do'],
  },
  mtsamis: {
    id: 'mtsamis',
    password:'xyz123',
    name: 'Mike Tsamis',
    avatarURL: "https://i.pravatar.cc/150?img=15",
    answers: {
      "xj352vofupe1dqz9emx13r": 'optionOne',
      "vthrdm985a262al8qx3do": 'optionTwo',
      "6ni6ok3ym7mf1p33lnez": 'optionOne'
    },
    questions: ['6ni6ok3ym7mf1p33lnez', 'xj352vofupe1dqz9emx13r'],
  },
  zoshikanlu: {
    id: 'zoshikanlu',
    password:'pass246',
    name: 'Zenobia Oshikanlu',
    avatarURL: "https://i.pravatar.cc/150?img=68",
    answers: {
      "xj352vofupe1dqz9emx13r": 'optionOne',
    },
    questions: [],
  }
}

let questions = {
  "8xf0y6ziyjabvozdd253nd": {
    id: '8xf0y6ziyjabvozdd253nd',
    author: 'sarahedo',
    timestamp: 1467166872634,
    optionOne: {
      votes: ['sarahedo'],
      text: 'Build our new application with Javascript',
    },
    optionTwo: {
      votes: [],
      text: 'Build our new application with Typescript'
    }
  },
  "6ni6ok3ym7mf1p33lnez": {
    id: '6ni6ok3ym7mf1p33lnez',
    author: 'mtsamis',
    timestamp: 1468479767190,
    optionOne: {
      votes: [],
      text: 'hire more frontend developers',
    },
    optionTwo: {
      votes: ['mtsamis', 'sarahedo'],
      text: 'hire more backend developers'
    }
  },
  "am8ehyc8byjqgar0jgpub9": {
    id: 'am8ehyc8byjqgar0jgpub9',
    author: 'sarahedo',
    timestamp: 1488579767190,
    optionOne: {
      votes: [],
      text: 'conduct a release retrospective 1 week after a release',
    },
    optionTwo: {
      votes: ['sarahedo'],
      text: 'conduct release retrospectives quarterly'
    }
  },
  "loxhs1bqm25b708cmbf3g": {
    id: 'loxhs1bqm25b708cmbf3g',
    author: 'tylermcginnis',
    timestamp: 1482579767190,
    optionOne: {
      votes: [],
      text: 'have code reviews conducted by peers',
    },
    optionTwo: {
      votes: ['sarahedo'],
      text: 'have code reviews conducted by managers'
    }
  },
  "vthrdm985a262al8qx3do": {
    id: 'vthrdm985a262al8qx3do',
    author: 'tylermcginnis',
    timestamp: 1489579767190,
    optionOne: {
      votes: ['tylermcginnis'],
      text: 'take a course on ReactJS',
    },
    optionTwo: {
      votes: ['mtsamis'],
      text: 'take a course on unit testing with Jest'
    }
  },
  "xj352vofupe1dqz9emx13r": {
    id: 'xj352vofupe1dqz9emx13r',
    author: 'mtsamis',
    timestamp: 1493579767190,
    optionOne: {
      votes: ['mtsamis', 'zoshikanlu'],
      text: 'deploy to production once every two weeks',
    },
    optionTwo: {
      votes: ['tylermcginnis'],
      text: 'deploy to production once every month'
    }
  },
}

export const allUsers = Object.entries(users).flatMap((user) => user.pop());
// 'allUsers' is an array of user objects, extracted from the 'users' object

function generateUID () {
  // 'generateUID' is a function that generates a unique string identifier
  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)
  // Return a random string of 30 characters, made up of digits and lowercase letters
}

export function _getUsers () {
  // '_getUsers' is a function that returns a promise that resolves with the 'users' object after a 1 second delay
  return new Promise((resolve) => {
    setTimeout(() => resolve({...users}), 1000)
  })
}

export function _getQuestions () {
  // '_getQuestions' is a function that returns a promise that resolves with the 'questions' object after a 1 second delay
  return new Promise((resolve) => {
    setTimeout(() => resolve({...questions}), 1000)
  })
}

function formatQuestion ({ optionOneText, optionTwoText, author }) {
  // 'formatQuestion' is a function that takes a question object as an argument and returns a formatted version of it
  // 'optionOneText', 'optionTwoText', and 'author' are properties of the question object
  return {
    id: generateUID(),
    // 'id' is a unique string identifier generated by the 'generateUID' function
    timestamp: Date.now(),
    // 'timestamp' is a number representing the current date and time
    author,
    // 'author' is the ID of the user who created the question
    optionOne: {
      votes: [],
      // 'votes' is an array of user IDs representing users who have voted for the first option
      text: optionOneText,
      // 'text' is the text of the first option
    },
    optionTwo: {
      votes: [],
      // 'votes' is an array of user IDs representing users who have voted for the second option
      text: optionTwoText,
      // 'text' is the text of the second option
    }
  }
}

export function _saveQuestion (question) {
  // '_saveQuestion' is a function that takes a question object as an argument and returns a promise
  return new Promise((resolve, reject) => {
    // If the question object is missing any of the required properties, reject the promise with an error message
    if (!question.optionOneText || !question.optionTwoText || !question.author) {
      reject("Please provide optionOneText, optionTwoText, and author");
    }

    // 'formattedQuestion' is the formatted version of the 'question' object
    const formattedQuestion = formatQuestion(question)

    // After a 1 second delay, add the formatted question to the 'questions' object and resolve the promise with the formatted question
    setTimeout(() => {
      questions = {
        ...questions,
        [formattedQuestion.id]: formattedQuestion
      }

      resolve(formattedQuestion)
    }, 1000)
  })
}

export function _saveQuestionAnswer ({ authedUser, qid, answer }) {
  // '_saveQuestionAnswer' is a function that takes an object with 'authedUser', 'qid', and 'answer' properties as an argument and returns a promise
  return new Promise((resolve, reject) => {
    // If any of the required properties are missing, reject the promise with an error message
    if (!authedUser || !qid || !answer) {
      reject("Please provide authedUser, qid, and answer");
    }

    // After a 500ms delay, update the 'users' and 'questions' objects to reflect the user's answer
    setTimeout(() => {
      users = {
        ...users,
        [authedUser]: {
          ...users[authedUser],
          answers: {
            ...users[authedUser].answers,
            [qid]: answer
          }
        }
      }

      questions = {
        ...questions,
        [qid]: {
          ...questions[qid],
          [answer]: {
            ...questions[qid][answer],
            votes: questions[qid][answer].votes.concat([authedUser])
          }
        }
      }

      // Resolve the promise with 'true'
      resolve(true)
    }, 500)
  })
}
